#!/bin/sh
# Git wrapper

help() {
  echo "Usage: g [c|ca|da|cf|u|si|s|p|sync_repos]"
  echo "  -c            checkout local branch"
  echo "  -ca           checkout branch"
  echo "  -da           delete all local branch"
  echo "  -cf           clear changes and checkout"
  echo "  -u            fetch prune and pull"
  echo "  -si           submodule init"
  echo "  -s            stash all files"
  echo "  -p            pop stash and reset"
  echo "  -snyc_repos   sync all repos from github"
  exit 1
}

c() {
  git branch | fzf | xargs git checkout
}

ca() {
  git branch -a | sed -e "s/origin\///g" | sed -e "s/remotes\///g" | uniq -u | fzf | xargs git checkout
}

da() {
  git branch | xargs git branch -D 2>/dev/null
}

cf() {
  git checkout -f
  git clean -df
}

u() {
  git fetch --prune
  git pull
}

si() {
  git submodule update --init --recursive
}

s() {
  git add .
  git stash
}

p() {
  git stash pop
  git reset
}

sync_repos() {
  gh repo list --limit 4000 | while read -r repo _; do
    gh repo clone "$repo" 2>/dev/null || echo "$repo already cloned"
    (cd "$(basename "$repo")" && git pull)
  done
}

main() {
  case $1 in
    -c | c) c ;;
    -ca | ca) ca ;;
    -da | da) da ;;
    -cf | cf) cf ;;
    -u | u) u ;;
    -si | si) si ;;
    -s | s) s ;;
    -p | p) p ;;
    -sync_repos | sync_repos) sync_repos ;;
    *) help ;;
  esac
}

main "$1"
